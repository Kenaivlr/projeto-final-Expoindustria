// Estado do Jogo
let gameState = {
    lives: 5,
    score: 0,
    level: 1,
    currentChallenge: 0,
    selectedEpis: []
};

// Banco de EPIs
const epis = {
    'EPI_CAPACETE_B': { name: 'Capacete Classe B', icon: '‚õëÔ∏è' },
    'EPI_VISEIRA_FACIAL': { name: 'Viseira Facial', icon: 'ü•Ω' },
    'EPI_BOTINA_ISOLANTE': { name: 'Botina Isolante com Biqueira de Composite', icon: 'üëû' },
    'EPI_LUVA_ISOLANTE': { name: 'Luva de Malha Pigmentada', icon: 'üß§' },
    'EPI_OCULOS': { name: '√ìculos de Seguran√ßa', icon: 'üëì' },
    'EPI_PROTETOR_AURICULAR': { name: 'Protetor Auricular', icon: 'üéß' },
    'EPI_MASCARA': { name: 'M√°scara Respirat√≥ria', icon: 'üò∑' },
    'EPI_CINTO': { name: 'Cinto de Seguran√ßa', icon: 'ü¶∫' },
    'EPI_LUVA_CORTE': { name: 'Luva de Raspa de Couro', icon: 'üß§üî™' },
    'EPI_TRAJE': { name: 'Traje Imperme√°vel de PVC', icon: 'ü•º' },
    'EPI_PROTETOR_SOLDADOR': { name: 'Viseira de Solda', icon: 'üî´ü•Ω' },
    'EPI_BOTINA_A√áO': { name: 'Botina com Biqueira de A√ßo', icon: 'ü•æ' }
};

// Banco de Desafios
const challenges = [
    {
        id: 'ELET_001',
        text: 'Voc√™ foi encarregado de organizar um antigo almoxarifado que est√° fechado h√° meses. Ao mover as caixas, uma grande quantidade de poeira e mofo sobe no ar. Qual EPI √© necess√°rio para proteger suas vias respirat√≥rias?',
        correctEpis: ['EPI_MASCARA'],
        successMessage: 'Parab√©ns! Com os EPIs corretos, a tarefa foi executada em total seguran√ßa.',
        failMessage: 'Cuidado! A prote√ß√£o facial e isolamento s√£o essenciais para trabalhos el√©tricos.',
        points: 100,
        image: 'img/pergunta01.mp4'
    },
    {
        id: 'ELET_002',
        text: 'Voc√™ est√° lixando uma parede rec√©m-emassada para prepar√°-la para a pintura. A atividade gera um p√≥ fino que se espalha pelo ambiente e pode atingir seus olhos. Qual EPI √© essencial para a prote√ß√£o ocular nesta tarefa?',
        correctEpis: ['EPI_OCULOS'],
        successMessage: '√ìtimo! Voc√™ est√° protegido contra cortes, fa√≠scas e ru√≠dos.',
        failMessage: 'Aten√ß√£o! Luvas anticorte e √≥culos s√£o indispens√°veis nesse tipo de atividade.',
        points: 120,
        image: 'img/pergunta02.mp4'
    },
    {
        id: 'ELET_003',
        text: 'Ap√≥s uma forte chuva, o p√°tio da f√°brica est√° com muitas po√ßas de √°gua. Voc√™ precisa atravessar a √°rea para chegar a outro setor, e h√° um risco de um cabo de energia energizado ter ca√≠do em uma das po√ßas. Qual EPI oferece a prote√ß√£o fundamental para seus p√©s?',
        correctEpis: ['EPI_BOTINA_ISOLANTE'],
        successMessage: 'Excelente! Voc√™ est√° totalmente protegido contra choques el√©tricos.',
        failMessage: 'Aten√ß√£o! Luvas isolantes s√£o fundamentais para trabalhos em circuitos energizados.',
        points: 180,
        image: 'img/pergunta03.mp4'
    },
    {
        id: 'ELET_004',
        text: 'Voc√™ precisa organizar uma bancada e guardar ferramentas pontiagudas e cortantes (form√µes, chaves de fenda, estiletes) em uma caixa. Qual EPI √© essencial para proteger suas m√£os?',
        correctEpis: ['EPI_LUVA_CORTE'],
        successMessage: 'Muito bem! Mesmo em inspe√ß√µes, a seguran√ßa √© prioridade.',
        failMessage: 'Lembre-se: mesmo sem contato direto, a prote√ß√£o b√°sica √© importante.',
        points: 150,
        image: 'img/pergunta04.mp4'
    },
    {
        id: 'ELET_005',
        text: 'Voc√™ est√° fazendo uma inspe√ß√£o a p√© em uma √°rea rural, passando por baixo de √°rvores com galhos secos que podem cair. O sol est√° forte. Qual EPI oferece a prote√ß√£o b√°sica para a sua cabe√ßa?',
        correctEpis: ['EPI_CAPACETE_B'],
        successMessage: 'Excelente! Prote√ß√£o garantida contra riscos el√©tricos de m√©dia tens√£o.',
        failMessage: 'Aten√ß√£o! O tapete isolante √© indispens√°vel nesse cen√°rio.',
        points: 120,
        image: 'img/pergunta05.mp4'
    },
    {
        id: 'ELET_006',
        text: 'Voc√™ precisa trocar o rolamento de uma bomba de √°gua industrial. O piso ao redor da bomba est√° sempre molhado e escorregadio, e a tarefa envolve manusear pe√ßas mec√¢nicas pesadas. Quais dois EPIs s√£o essenciais para evitar os principais riscos?',
        correctEpis: ['EPI_LUVA_CORTE', 'EPI_BOTINA_ISOLANTE'],
        successMessage: 'Perfeito! Prote√ß√£o dupla: contra choques e quedas!',
        failMessage: 'N√£o esque√ßa: trabalho em altura exige cinto de seguran√ßa!',
        points: 220,
        image: 'img/pergunta06.mp4'
    },
    {
        id: 'ELET_007',
        text: 'Sua tarefa √© usar uma furadeira de impacto para fixar eletrodutos no alto de uma parede de concreto. A fura√ß√£o projeta p√≥ e pequenos detritos para baixo. Qual a combina√ß√£o de EPIs necess√°ria para proteger sua cabe√ßa e seus olhos?',
        correctEpis: ['EPI_OCULOS', 'EPI_CAPACETE_B'],
        successMessage: 'Perfeito! A exposi√ß√£o qu√≠mica foi controlada.',
        failMessage: 'Cuidado! Produtos qu√≠micos exigem respirador e avental de prote√ß√£o.',
        points: 200,
        image: 'img/pergunta07.mp4'
    },
    {
        id: 'ELET_008',
        text: 'Voc√™ vai realizar a limpeza interna de um painel el√©trico (desenergizado) usando um spray solvente em aerossol para remover oxida√ß√£o dos contatos. O produto √© vol√°til e pode causar irrita√ß√£o nos olhos e no sistema respirat√≥rio. Quais EPIs s√£o indispens√°veis?',
        correctEpis: ['EPI_MASCARA', 'EPI_OCULOS'],
        successMessage: 'Excelente! Prote√ß√£o contra fa√≠scas, cortes e ru√≠do garantida.',
        failMessage: '√ìculos e luvas anticorte s√£o indispens√°veis!',
        points: 220,
        image: 'img/pergunta08.mp4'
    },
    {
        id: 'ELET_009',
        text: 'Sua tarefa √© furar o teto de concreto para passar um eletroduto. A atividade gera muito ru√≠do e projeta poeira e detritos diretamente para baixo, na sua dire√ß√£o. Quais s√£o os dois EPIs indispens√°veis?',
        correctEpis: ['EPI_PROTETOR_AURICULAR', 'EPI_OCULOS'],
        successMessage: 'Correto! A audi√ß√£o foi protegida em ambiente ruidoso.',
        failMessage: 'Sem protetor auricular, h√° risco de perda auditiva.',
        points: 200,
        image: 'img/pergunta09.mp4'
    },
    {
        id: 'ELET_010',
        text: 'Voc√™ est√° realizando a troca de filtro em um gerador de energia. O piso ao redor da m√°quina est√° manchado de √≥leo, e as tampas de acesso ao motor s√£o pesadas. Quais s√£o os dois EPIs essenciais para esta manuten√ß√£o mec√¢nica?',
        correctEpis: ['EPI_BOTINA_A√áO', 'EPI_LUVA_CORTE'],
        successMessage: 'Muito bem! Voc√™ evitou cortes e esmagamentos.',
        failMessage: 'Luvas anticorte s√£o indispens√°veis ao manusear chapas.',
        points: 220,
        image: 'img/pergunta010.mp4'
    },
    {
        id: 'ELET_011',
        text: 'Um painel el√©trico industrial sofreu um curto-circuito, gerando um princ√≠pio de inc√™ndio com fuma√ßa densa. Como membro da equipe de manuten√ß√£o e brigada, voc√™ precisa se aproximar para usar um extintor de CO2 e avaliar os danos. O painel ainda apresenta risco de arco el√©trico. Qual o conjunto de EPIs para uma aproxima√ß√£o segura?',
        correctEpis: ['EPI_VISEIRA_FACIAL', 'EPI_CAPACETE_B', 'EPI_MASCARA', 'EPI_LUVA_CORTE'],
        successMessage: 'Muito bem! Voc√™ garantiu prote√ß√£o qu√≠mica adequada.',
        failMessage: 'Sem respirador e avental, a exposi√ß√£o qu√≠mica √© perigosa.',
        points: 250,
        image: 'img/pergunta011.mp4'
    },
    {
        id: 'ELET_012',
        text: 'Voc√™ precisa puxar a fia√ß√£o e instalar uma tomada industrial para uma betoneira em um canteiro de obras. O ambiente tem muito ru√≠do de outras m√°quinas, o ch√£o est√° lamacento e h√° oper√°rios trabalhando em andaimes acima de voc√™. Selecione os EPIs necess√°rios para todos os riscos envolvidos.',
        correctEpis: ['EPI_CAPACETE_B', 'EPI_PROTETOR_AURICULAR', 'EPI_BOTINA_ISOLANTE'],
        successMessage: '√ìtimo! Voc√™ se protegeu contra queda e objetos soltos.',
        failMessage: 'Nunca esque√ßa o cinto de seguran√ßa em altura!',
        points: 290,
        image: 'img/pergunta012.mp4'
    },
    {
        id: 'ELET_013',
        text: 'Voc√™ vai subir em um poste de madeira, usando esporas, para realizar a substitui√ß√£o de um isolador em uma rede de distribui√ß√£o de baixa tens√£o. A tarefa envolve risco de queda, choque el√©trico e manuseio de materiais que podem causar perfura√ß√µes. Qual o kit de EPIs completo para esta atividade?',
        correctEpis: ['EPI_CINTO', 'EPI_CAPACETE_B', 'EPI_BOTINA_ISOLANTE', 'EPI_LUVA_CORTE'],
        successMessage: 'Correto! Voc√™ se protegeu contra vapores e respingos qu√≠micos.',
        failMessage: 'M√°scara e respirador s√£o indispens√°veis nesse tipo de atividade.',
        points: 300,
        image: 'img/pergunta013.mp4'
    },
    {
        id: 'ELET_014',
        text: 'Voc√™ precisa entrar em um grande tanque met√°lico (espa√ßo confinado) para realizar um pequeno reparo com solda. O ambiente tem ventila√ß√£o limitada e a solda gera fumos, radia√ß√£o e fagulhas. Qual o conjunto de EPIs para realizar a tarefa e garantir uma poss√≠vel evacua√ß√£o de emerg√™ncia?',
        correctEpis: ['EPI_PROTETOR_SOLDADOR', 'EPI_CINTO', 'EPI_LUVA_CORTE', 'EPI_MASCARA'],
        successMessage: 'Correto! Voc√™ se protegeu contra vapores e respingos qu√≠micos.',
        failMessage: 'M√°scara e respirador s√£o indispens√°veis nesse tipo de atividade.',
        points: 280,
        image: 'img/pergunta014.mp4'
    },
    {
        id: 'ELET_015',
        text: 'Voc√™ faz parte da equipe que vai podar galhos de uma √°rvore grande que est√£o quase encostando na rede el√©trica da rua. A tarefa envolve o uso de motosserra e o risco de um galho cair sobre a fia√ß√£o energizada. Quais EPIs s√£o necess√°rios para se proteger dos m√∫ltiplos riscos?',
        correctEpis: ['EPI_CAPACETE_B', 'EPI_OCULOS', 'EPI_PROTETOR_AURICULAR', 'EPI_LUVA_CORTE'],
        successMessage: 'Correto! Voc√™ se protegeu contra vapores e respingos qu√≠micos.',
        failMessage: 'M√°scara e respirador s√£o indispens√°veis nesse tipo de atividade.',
        points: 300,
        image: 'img/pergunta015.mp4'
    },

];

let loggedInUser = null;

//nova fun√ß√£o de LOGIN

async function handleLogin() {
    const username = document.getElementById('usuario').value;
    const password = document.getElementById('senha').value;

    if (!username || !password) {
        alert('Por favor, preencha usu√°rio e senha.');
        return;
    }
    try {
        const response = await fetch('http://localhost:3000/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        });

        const result = await response.json();

        if (result.success) {
            loggedInUser = username;

            startGame();
        } else {
            alert(result.message);
        }
    } catch (error) {
        console.error('Erro ao tentar fazer login:', error);
        alert('Erro ao conectar com o servidor.');
    }
}

//nova fun√ßao de CADASTRO

async function handleRegister() {
    requestFullscreen();
    const username = document.getElementById('usuario').value;
    const password = document.getElementById('senha').value;
    if (!username || !password) {
        alert('Por favor, preencha usu√°rio e senha para se cadastrar.');
        return;
    }
    try {
        const response = await fetch('http://localhost:3000/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        });

        const result = await response.json();
        alert(result.message);
    } catch (error) {
        console.error('Erro ao tentar se cadastrar:', error);
        alert('N√£o foi poss√≠vel conectar ao servidor.');
    }
}

//nova fun√ß√£o para salvar pontua√ß√£o

async function saveScore() {
    if (!loggedInUser) {
        console.log("Nenhum usu√°rio logado para salvar a pontua√ß√£o.");
        return;
    }
    try {
        await fetch('http://localhost:3000/save-score', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                username: loggedInUser,
                score: gameState.score
            }),
        });
        console.log('pontua√ß√£o enviada para o servidor.');
    } catch (error) {
        console.error('Erro ao salvar pontua√ß√£o:', error);
    }
}

// Nova fun√ß√£o para MOSTRAR O RANKING
async function showRanking() {
    try {
        const response = await fetch("http://localhost:3000/ranking");
        const rankingData = await response.json();

        const rankingListDiv = document.getElementById("rankingList");
        rankingListDiv.innerHTML = ""; // Limpa a lista antiga

        if (rankingData.length === 0) {
            rankingListDiv.innerHTML = "Nenhum jogador no ranking ainda.";
        } else {
            rankingData.forEach((player, index) => {
                const rankEntry = document.createElement("div");
                rankEntry.innerHTML = `<strong>${index + 1}. ${player.username}</strong> - ${player.score} pontos <i>(${player.rank})</i>`;
                rankingListDiv.appendChild(rankEntry);
            });
        }

        // Esconde o menu e mostra a tela de ranking
        document.getElementById('menuScreen').style.display = 'none';
        document.getElementById('rankingScreen').style.display = 'flex';

    } catch (error) {
        console.error("Erro ao buscar o ranking:", error);
        alert("N√£o foi poss√≠vel carregar o ranking.");
    }
}

//fun√ß√£o tela cheia
function requestFullscreen() {
    const elem = document.documentElement; // pega <html>

    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) { // Firefox
        elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) { // Chrome, Safari e Opera
        elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) { // IE/Edge
        elem.msRequestFullscreen();
    }
}


// Fun√ß√µes do Jogo
function startGame() {
    //tela cheia 
    requestFullscreen();

    // Esconde o menu
    document.getElementById('menuScreen').style.display = 'none';

    // Mostra a tela de introdu√ß√£o
    const introScreen = document.getElementById("introScreen");
    const introVideo = document.getElementById("introVideo");

    // Garante que o v√≠deo comece agora
    introVideo.currentTime = 0; // reinicia do come√ßo
    introVideo.play();

    introScreen.style.display ="block";

    // Quando o v√≠deo terminar ‚Üí inicia o jogo
    introVideo.addEventListener("ended", () => {
        introScreen.style.display = "none";
        iniciarJogo();
    });
}

// Fun√ß√£o auxiliar para realmente iniciar o jogo
function iniciarJogo() {

    document.getElementById('gameScreen').style.display = 'block';
    resetGame();
    loadChallenge();
}

function resetGame() {
    gameState = {
        lives: 5.,
        score: 0,
        level: 1,
        currentChallenge: 0,
        selectedEpis: []
    };
    updateStats();
}

function loadChallenge() {
    const challenge = challenges[gameState.currentChallenge % challenges.length];
    document.getElementById('challengeText').textContent = challenge.text;
    const challengeMedia = document.getElementById('challengeImage');

// Se for v√≠deo
    if (challenge.image.endsWith('.mp4')) {
        challengeMedia.innerHTML = `<source src="${challenge.image}" type="video/mp4">`;
        challengeMedia.load();
        challengeMedia.play();
    } else {
        // fallback caso queira usar imagemmp4
        challengeMedia.src = challenge.image;
    }

    // Limpar sele√ß√£o anterior
    gameState.selectedEpis = [];

    // Criar cards de EPI
    const epiContainer = document.getElementById('epiCards');
    epiContainer.innerHTML = '';

    // Embaralhar EPIs para mostrar
    const allEpiKeys = Object.keys(epis);
    const shuffled = allEpiKeys.sort(() => Math.random() - 0.5);

    shuffled.forEach(epiKey => {
        const epi = epis[epiKey];
        const card = document.createElement('div');
        card.className = 'epi-card';
        card.dataset.epiId = epiKey;
        card.innerHTML = `
                    <div class="epi-icon">${epi.icon}</div>
                    <div class="epi-name">${epi.name}</div>
                `;
        card.onclick = () => toggleEpi(epiKey);
        epiContainer.appendChild(card);
    });
}

function toggleEpi(epiId) {
    const card = document.querySelector(`[data-epi-id="${epiId}"]`);
    const index = gameState.selectedEpis.indexOf(epiId);

    if (index === -1) {
        gameState.selectedEpis.push(epiId);
        card.classList.add('selected');
    } else {
        gameState.selectedEpis.splice(index, 1);
        card.classList.remove('selected');
    }

    // Habilitar/desabilitar bot√£o confirmar
    const confirmButton = document.getElementById('confirmButton');
    confirmButton.disabled = gameState.selectedEpis.length === 0;
}

function checkAnswer() {
    const challenge = challenges[gameState.currentChallenge % challenges.length];
    const correct = arraysEqual(gameState.selectedEpis.sort(), challenge.correctEpis.sort());

    if (correct) {
        showSuccess(challenge);
    } else {
        showFailure(challenge);
    }
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
    }
    return true;
}

function showSuccess(challenge) {
    gameState.score += challenge.points;
    updateStats();

    const overlay = document.getElementById('resultOverlay');
    const content = document.getElementById('resultContent');

    content.innerHTML = `
                <div class="success-animation">
                    <div class="success-worker">üë∑‚Äç‚ôÇÔ∏èüëç</div>
                    <div class="success-text">SUCESSO!</div>
                    <div class="success-points">+${challenge.points} PONTOS</div>
                    <p style="color: #fff; font-size: 10px; margin: 20px 0; line-height: 1.6;">
                        ${challenge.successMessage}
                    </p>
                    <button class="continue-button" onclick="nextChallenge()">CONTINUAR</button>
                </div>
            `;

    overlay.classList.add('show');
    playSound('success');
}

function showFailure(challenge) {
    gameState.lives--;
    updateStats();

    const overlay = document.getElementById('resultOverlay');
    const content = document.getElementById('resultContent');

    // EPIs corretos para mostrar
    const correctEpisList = challenge.correctEpis.map(id => epis[id].name).join(', ');

    content.innerHTML = `
                <div class="fail-animation">
                    <div class="shocked-worker">
                        <span style="position: relative;">üòµ</span>
                        <span class="skeleton-flash">üíÄ</span>
                        <span class="lightning-bolt" style="top: -30px; left: -40px;">‚ö°</span>
                        <span class="lightning-bolt" style="top: -30px; right: -40px;">‚ö°</span>
                    </div>
                    <div class="fail-text">CHOQUE!</div>
                    <div class="fail-explanation">
                        ${challenge.failMessage}<br><br>
                        EPIs corretos: ${correctEpisList}
                    </div>
                    <button class="continue-button" onclick="nextChallenge()">
                        ${gameState.lives > 0 ? 'TENTAR NOVAMENTE' : 'REINICIAR JOGO'}
                    </button>
                </div>
            `;

    overlay.classList.add('show');
    playSound('shock');

    if (gameState.lives === 0) {
        saveScore(); // <-- foi add apenas essa linha

        setTimeout(() => {
            alert(`Game Over! Pontua√ß√£o final: ${gameState.score}`);
            showMenu();
        }, 2000);
    }
}

function nextChallenge() {
    document.getElementById('resultOverlay').classList.remove('show');

    if (gameState.lives > 0) {
        gameState.currentChallenge++;
        if (gameState.currentChallenge % 1 === 0) {
            gameState.level++;
            updateStats();
            if (gameState.level > 15) {
                updateStats();
                saveScore();
                showMenu();
            }
        }
        loadChallenge();
    } else {
        showMenu();
    }
}

function showMenu() {
    document.getElementById('menuScreen').style.display = 'flex';
    document.getElementById('gameScreen').style.display = 'none';
    document.getElementById('rankingScreen').style.display = 'none';
    document.getElementById('resultOverlay').classList.remove('show');
}

function updateStats() {
    document.getElementById('lives').textContent = gameState.lives;
    document.getElementById('score').textContent = gameState.score;
    document.getElementById('level').textContent = gameState.level;
}

function showInstructions() {
    alert(`
INSTRU√á√ïES DO JOGO:

1. Leia atentamente a situa√ß√£o apresentada
2. Selecione os EPIs necess√°rios clicando nos cards
3. Clique em CONFIRMAR quando tiver certeza
4. Ganhe pontos por respostas corretas
5. Voc√™ tem 5 vidas - use com sabedoria!
6. A cada 5 perguntas o nivel da pergunta muda: 
FACIL = 1 EPI, MEDIO = 2 EPI¬¥s, DIFICIL = 3 ou 4 EPI¬¥s

DICA: Pense sempre na seguran√ßa primeiro!
            `);
}

function playSound(type) {
    // Simula√ß√£o de sons com Web Audio API
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();

    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);

    if (type === 'success') {
        oscillator.frequency.setValueAtTime(523.25, audioContext.currentTime); // C5
        oscillator.frequency.setValueAtTime(659.25, audioContext.currentTime + 0.1); // E5
        oscillator.frequency.setValueAtTime(783.99, audioContext.currentTime + 0.2); // G5
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
    } else if (type === 'shock') {
        oscillator.type = 'sawtooth';
        oscillator.frequency.setValueAtTime(100, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(20, audioContext.currentTime + 0.5);
        gainNode.gain.setValueAtTime(0.5, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
    }

    oscillator.start();
    oscillator.stop(audioContext.currentTime + 0.5);
}


let bgMusic = null;
// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function () {
    updateStats();

    bgMusic = document.getElementById('bgMusic');
    const volumeSlider = document.getElementById('volumeRange');

    if (volumeSlider && bgMusic) {
        bgMusic.volume = volumeSlider.value / 100; // inicia no valor do slider
        volumeSlider.addEventListener('input', (e) => {
            bgMusic.volume = e.target.value / 100;
        });
    }
});


//----------------------------------------------------------------------------------------------------------------------

// --- L√ìGICA DO NOVO MENU HAMB√öRGUER ---

const hamburgerMenu = document.getElementById('hamburger-menu');
const sideMenu = document.getElementById('sideMenu');
const backToMenuBtn = document.getElementById('backToMenuBtn');

// Abre e fecha o menu lateral
hamburgerMenu.addEventListener('click', () => {
    const isOpen = sideMenu.classList.toggle('show');
    hamburgerMenu.classList.toggle('active', isOpen); // adiciona classe s√≥ quando aberto
});


// Fun√ß√£o para controlar a visibilidade do bot√£o "VOLTAR"
function updateMenuButtonVisibility() {
    const gameScreen = document.getElementById('gameScreen');
    if (gameScreen.style.display === 'block') {
        backToMenuBtn.style.display = 'block';
    } else {
        backToMenuBtn.style.display = 'none';
    }
}

// Fun√ß√µes que fecham o menu antes de executar a a√ß√£o
function showRankingFromMenu() {
    sideMenu.classList.remove('show');
    showRanking();
}

function showMenuFromSideMenu() {
    sideMenu.classList.remove('show');
    showMenu();
}

// Sobrescrevendo fun√ß√µes antigas para atualizar o menu
const originalStartGame = startGame;
startGame = function () {
    originalStartGame();
    updateMenuButtonVisibility();
};

const originalShowMenu = showMenu;
showMenu = function () {
    originalShowMenu();
    updateMenuButtonVisibility();
};

// Fecha o menu se clicar fora
document.addEventListener('click', (e) => {
    if (!sideMenu.contains(e.target) && !hamburgerMenu.contains(e.target)) {
        sideMenu.classList.remove('show');
        hamburgerMenu.classList.remove('active');
    }
});

// Corrige visibilidade do bot√£o "Voltar ao Menu"
function updateMenuButtonVisibility() {
    const gameScreen = document.getElementById('gameScreen');
    const visible = window.getComputedStyle(gameScreen).display !== 'none';
    backToMenuBtn.style.display = visible ? 'block' : 'none';
}
